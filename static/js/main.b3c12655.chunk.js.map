{"version":3,"sources":["assets/images/01.png","assets/images/02.png","assets/images/03.png","assets/images/04.png","assets/images/05.png","assets/images/06.png","assets/images/01 lock.png","assets/images/02 lock.png","assets/images/03 lock.png","assets/images/04 lock.png","assets/images/05 lock.png","assets/images/06 lock.png","provesData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","proves","label","description","href","target","response","puzzleOrder","App","useState","actProva","setActProva","showSuccessMessage","setShowSuccessMessage","inputValue","setInputValue","puzzleFlipped","setPuzzleFlipped","allFinished","setAllFinished","inputError","setInputError","resolvedImages","img1","img2","img3","img4","img5","img6","lockImages","imgLock1","imgLock2","imgLock3","imgLock4","imgLock5","imgLock6","className","Snackbar","open","autoHideDuration","onClose","elevation","variant","severity","TextField","id","value","onChange","e","error","Button","onClick","updatedPuzzleFlipped","map","p","key","src","style","width","borderRadius","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b3c12655.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/01.c9e39ab4.png\";","module.exports = __webpack_public_path__ + \"static/media/02.c6ab4fa2.png\";","module.exports = __webpack_public_path__ + \"static/media/03.28911e52.png\";","module.exports = __webpack_public_path__ + \"static/media/04.fcc3e978.png\";","module.exports = __webpack_public_path__ + \"static/media/05.e2fb1048.png\";","module.exports = __webpack_public_path__ + \"static/media/06.b0346cbb.png\";","module.exports = __webpack_public_path__ + \"static/media/01 lock.3d48693c.png\";","module.exports = __webpack_public_path__ + \"static/media/02 lock.27c464b5.png\";","module.exports = __webpack_public_path__ + \"static/media/03 lock.a1081dfe.png\";","module.exports = __webpack_public_path__ + \"static/media/04 lock.eb1a07b4.png\";","module.exports = __webpack_public_path__ + \"static/media/05 lock.3996d274.png\";","module.exports = __webpack_public_path__ + \"static/media/06 lock.73a3bb12.png\";","import React from 'react';\r\n\r\nexport const proves = [\r\n    {\r\n        label: \"Resposta prova 1\",\r\n        description: <div> Has de trobar totes les .... : <a href=\"https://www.youtube.com/watch?v=MnQruILg9mo\" target=\"_blank\">VÃ­deo</a></div>,\r\n        response: \"resposta1\"\r\n    },\r\n    {\r\n        label: \"Resposta prova 2\",\r\n        description: <p> JITSI MEET : <a href=\"https://www.youtube.com/watch?v=MnQruILg9mo\" target=\"_blank\"> VIDEO </a></p>,\r\n        response: \"resposta2\"\r\n    },\r\n    {\r\n        label: \"Resposta prova 3\",\r\n        description: <p>Has de fer... bla bla bla</p>,\r\n        response: \"resposta3\"\r\n    },\r\n    {\r\n        label: \"Resposta prova 4\",\r\n        description: <p>Has de fer... bla bla bla2</p>,\r\n        response: \"resposta4\"\r\n    },\r\n    {\r\n        label: \"Resposta prova 5\",\r\n        description: <p>Calcular mentalment 1min.(marge error de 5seg)</p>,\r\n        response: \"resposta5\"\r\n    },\r\n    {\r\n        label: \"Resposta prova 6\",\r\n        description: <p>Saltaa!</p>,\r\n        response: \"resposta6\"\r\n    },\r\n\r\n];","import React, { useState } from 'react';\nimport './App.css';\nimport { TextField, Button, Snackbar } from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { proves } from './provesData';\nimport img1 from './assets/images/01.png';\nimport img2 from './assets/images/02.png';\nimport img3 from './assets/images/03.png';\nimport img4 from './assets/images/04.png';\nimport img5 from './assets/images/05.png';\nimport img6 from './assets/images/06.png';\nimport imgLock1 from './assets/images/01 lock.png';\nimport imgLock2 from './assets/images/02 lock.png';\nimport imgLock3 from './assets/images/03 lock.png';\nimport imgLock4 from './assets/images/04 lock.png';\nimport imgLock5 from './assets/images/05 lock.png';\nimport imgLock6 from './assets/images/06 lock.png';\nimport './assets/styles/bootstrap.min.css'\n\nconst puzzleOrder = [2, 4, 3, 5, 1, 0];\n\nfunction App() {\n  const [actProva, setActProva] = useState(0);\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [puzzleFlipped, setPuzzleFlipped] = useState([false, false, false, false, false, false]);\n  const [allFinished, setAllFinished] = useState(false);\n  const [inputError, setInputError] = useState(false);\n  const resolvedImages = [img1, img2, img3, img4, img5, img6];\n  const lockImages = [imgLock1, imgLock2, imgLock3, imgLock4, imgLock5, imgLock6];\n\n  const handleProvaClick = () => {\n    if (proves[actProva].response === inputValue) {\n      setShowSuccessMessage(true);\n      let updatedPuzzleFlipped = [...puzzleFlipped];\n      updatedPuzzleFlipped[puzzleOrder[actProva]] = true;\n      setPuzzleFlipped(updatedPuzzleFlipped);\n      if (actProva < 5) setActProva(actProva + 1);\n      else setAllFinished(true);\n      setInputValue('');\n      setInputError(false);\n    } else setInputError(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"mt-2\">Gincana Virtual INA 30</h1>\n\n      <Snackbar open={showSuccessMessage} autoHideDuration={3000} onClose={() => setShowSuccessMessage(false)}>\n        <MuiAlert elevation={6} variant=\"filled\" onClose={() => setShowSuccessMessage(false)} severity=\"success\" >\n          Resposta correcta!\n        </MuiAlert>\n      </Snackbar>\n\n      {!allFinished &&\n        <div className=\"d-flex flex-column align-items-center my-4\">\n          <h3 >{`Prova ${actProva + 1}`}</h3>\n          <div className=\"mb-2\">{proves[actProva].description}</div>\n          <div className=\"d-flex\">\n            <TextField\n              id=\"standard-basic\"\n              label=\"Resposta\"\n              value={inputValue}\n              variant=\"outlined\"\n              onChange={(e) => { setInputValue(e.target.value); setInputError(false); }}\n              error={inputError}\n            />\n            <Button variant=\"contained\" className='ml-2' onClick={handleProvaClick}>Comprova</Button>\n          </div>\n\n        </div>\n      }\n\n      <div >\n        {puzzleFlipped.map((p, key) => (\n          <>\n            <img src={p ? resolvedImages[key] : lockImages[key]} style={{ width: '20%', borderRadius: p ? '' : '20%' }} />\n            {key == 2 && <br />}\n          </>\n        ))}\n      </div>\n\n      {allFinished &&\n        <div className=\"mt-3\">\n          <h2>Yuhuuuu!!! Felicitats, aquÃ­ tens el nostre regal: linkk</h2>\n          <p>NecessitarÃ s una contrasenya... el puzzle que acabes de resoldre t'hauria d'ajudar! ðŸ˜œ</p>\n        </div>\n      }\n\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}